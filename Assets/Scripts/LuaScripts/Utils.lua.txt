
local M = {}

function M.Printtb(t)
    -- local print_r_cache = {}
    -- local output = {}
    -- local function sub_print_r(t, indent)
    --     if (print_r_cache[tostring(t)]) then
    --         table.insert(output, (indent.."*"..tostring(t)))
    --     else
    --         print_r_cache[tostring(t)] = true
    --         if (type(t) == "table") then
    --             for pos,val in pairs(t) do
    --                 if (type(val) == "table") then
    --                     table.insert(output, indent.."["..pos.."] => "..tostring(t).." {")
    --                     sub_print_r(val, indent..string.rep(" ",string.len(pos)+8))
    --                     table.insert(output, indent..string.rep(" ",string.len(pos)+6).."}")
    --                 elseif (type(val) == "string") then
    --                     table.insert(output, (indent.."["..pos..'] => "'..val..'"'))

    --                 else
    --                     table.insert(output, (indent.."["..pos.."] => "..tostring(val)))
    --                 end
    --             end
    --         else
    --             table.insert(output, (indent..tostring(t)))
    --         end
    --     end
    -- end

    -- if (type(t) == "table") then
    --     table.insert(output, (tostring(t).." {"))
    --     sub_print_r(t,"  ")
    --     table.insert(output, ("}"))
    -- else
    --     sub_print_r(t,"  ")
    -- end
    -- print(table.concat(output, "\n"))
end

-- function M.AddListener(types,msgType,func)
--     local addListener_generic = xlua.get_generic_method(CS.MessengerCenter.EventCenter,"AddListener")
--     local addListener 
--     if #types == 0 then
--         addListener = addListener_generic()
--     elseif #types==1 then 
--         addListener = addListener_generic(types[1])
--     elseif #types==2 then 
--         addListener = addListener_generic(types[1],types[2])
--     elseif #types==3 then 
--         addListener = addListener_generic(types[1],types[2],types[3])
--     elseif #types==4 then 
--         addListener = addListener_generic(types[1],types[2],types[3],types[4])
--     elseif #types==5 then 
--         addListener = addListener_generic(types[1],types[2],types[3],types[4],types[5])
--     end
--     addListener(msgType,func)
--     print("======================:addListener")
-- end

-- function M.RemoveListener(types,msgType,func)
--     local removeListener_generic = xlua.get_generic_method(CS.MessengerCenter.EventCenter,"RemoveListener")
--     local removeListener 
--     if #types == 0 then
--         removeListener = removeListener_generic()
--     elseif #types==1 then 
--         removeListener = removeListener_generic(types[1])
--     elseif #types==2 then 
--         removeListener = removeListener_generic(types[1],types[2])
--     elseif #types==3 then 
--         removeListener = removeListener_generic(types[1],types[2],types[3])
--     elseif #types==4 then 
--         removeListener = removeListener_generic(types[1],types[2],types[3],types[4])
--     elseif #types==5 then 
--         removeListener = removeListener_generic(types[1],types[2],types[3],types[4],types[5])
--     end
--     removeListener(msgType,func)
--     print("======================:removeListener")
-- end


-- function M.Broadcast(types,msgType,args)
--     local broadcast_generic = xlua.get_generic_method(CS.MessengerCenter.EventCenter,"Broadcast")
--     local broadcast 
--     if #types == 0 then
--         broadcast = broadcast_generic
--         broadcast(msgType)
--     elseif #types==1 then 
--         broadcast = broadcast_generic(types[1])
--         broadcast(msgType,args[1])
--     elseif #types==2 then 
--         broadcast = broadcast_generic(types[1],types[2])
--         broadcast(msgType,args[1],args[2])
--     elseif #types==3 then 
--         broadcast = broadcast_generic(types[1],types[2],types[3])
--         broadcast(msgType,args[1],args[2],args[3])
--     elseif #types==4 then 
--         broadcast = broadcast_generic(types[1],types[2],types[3],types[4])
--         broadcast(msgType,args[1],args[2],args[3],args[4])
--     elseif #types==5 then 
--         broadcast = broadcast_generic(types[1],types[2],types[3],types[4],types[5])
--         broadcast(msgType,args[1],args[2],args[3],args[4],args[5])
--     end
--     print("======================:broadcast")
-- end

return M